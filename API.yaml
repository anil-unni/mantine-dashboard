openapi: 3.0.3
info:
  title: Task Management API
  version: 1.0.0
  description: A comprehensive task management system API with organizations, projects,
    and user management.
paths:
  /api/v1/auth/register/:
    post:
      operationId: v1_auth_register_create
      description: User registration endpoint.
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
        required: true
      security:
        - jwtAuth: []
        - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegistration'
          description: ''
  /api/v1/auth/login/:
    post:
      operationId: v1_auth_login_create
      description: Override post method to return standardized response.
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomTokenObtainPairRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomTokenObtainPairRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomTokenObtainPairRequest'
        required: true
      responses:
        '200':
          description: No response body
  /api/v1/auth/token/refresh/:
    post:
      operationId: v1_auth_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/v1/auth/logout/:
    post:
      operationId: v1_auth_logout_create
      description: Logout user by blacklisting the refresh token.
      tags:
        - v1
      security:
        - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/auth/password-reset/:
    post:
      operationId: v1_auth_password_reset_create
      description: Request password reset.
      tags:
        - v1
      security:
        - jwtAuth: []
        - {}
      responses:
        '200':
          description: No response body
  /api/v1/auth/password-reset-confirm/:
    post:
      operationId: v1_auth_password_reset_confirm_create
      description: Confirm password reset with token.
      tags:
        - v1
      security:
        - jwtAuth: []
        - {}
      responses:
        '200':
          description: No response body
  /api/v1/auth/change-password/:
    post:
      operationId: v1_auth_change_password_create
      description: Change user password.
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
        required: true
      security:
        - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangePassword'
          description: ''
  /api/v1/auth/profile/:
    get:
      operationId: v1_auth_profile_retrieve
      description: Retrieve or update user profile.
      tags:
        - v1
      security:
        - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: v1_auth_profile_update
      description: Retrieve or update user profile.
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      security:
        - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: v1_auth_profile_partial_update
      description: Retrieve or update user profile.
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
      security:
        - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/v1/auth/profile/update/:
    put:
      operationId: v1_auth_profile_update_update
      description: Update user profile information.
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      security:
        - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUpdate'
          description: ''
    patch:
      operationId: v1_auth_profile_update_partial_update
      description: Update user profile information.
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserUpdateRequest'
      security:
        - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUpdate'
          description: ''
  /api/v1/auth/me/permissions/:
    get:
      operationId: v1_auth_me_permissions_retrieve
      tags:
        - v1
      security:
        - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MyPermissions'
          description: ''
  /api/v1/auth/permissions/:
    get:
      operationId: v1_auth_permissions_list
      parameters:
        - name: ordering
          required: false
          in: query
          description: Which field to use when ordering the results.
          schema:
            type: string
        - name: page
          required: false
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
        - name: search
          required: false
          in: query
          description: A search term.
          schema:
            type: string
      tags:
        - v1
      security:
        - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPermissionList'
          description: ''
    post:
      operationId: v1_auth_permissions_create
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PermissionRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PermissionRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PermissionRequest'
        required: true
      security:
        - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
          description: ''
  /api/v1/auth/permissions/{id}/:
    get:
      operationId: v1_auth_permissions_retrieve
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: A unique integer value identifying this Permission.
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
          description: ''
    put:
      operationId: v1_auth_permissions_update
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: A unique integer value identifying this Permission.
          required: true
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PermissionRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PermissionRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PermissionRequest'
        required: true
      security:
        - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
          description: ''
    delete:
      operationId: v1_auth_permissions_destroy
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: A unique integer value identifying this Permission.
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
      responses:
        '204':
          description: No response body
    patch:
      operationId: v1_auth_permissions_partial_update
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: A unique integer value identifying this Permission.
          required: true
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPermissionRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPermissionRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPermissionRequest'
      security:
        - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
          description: ''
  /api/v1/auth/roles/:
    get:
      operationId: v1_auth_roles_list
      parameters:
        - name: ordering
          required: false
          in: query
          description: Which field to use when ordering the results.
          schema:
            type: string
        - name: page
          required: false
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
        - name: search
          required: false
          in: query
          description: A search term.
          schema:
            type: string
      tags:
        - v1
      security:
        - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRoleList'
          description: ''
    post:
      operationId: v1_auth_roles_create
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RoleRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RoleRequest'
        required: true
      security:
        - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
          description: ''
  /api/v1/auth/roles/{id}/:
    get:
      operationId: v1_auth_roles_retrieve
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: A unique integer value identifying this Role.
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
          description: ''
    put:
      operationId: v1_auth_roles_update
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: A unique integer value identifying this Role.
          required: true
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RoleRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RoleRequest'
        required: true
      security:
        - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
          description: ''
    delete:
      operationId: v1_auth_roles_destroy
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: A unique integer value identifying this Role.
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
      responses:
        '204':
          description: No response body
    patch:
      operationId: v1_auth_roles_partial_update
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: A unique integer value identifying this Role.
          required: true
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRoleRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRoleRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRoleRequest'
      security:
        - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
          description: ''
  /api/v1/auth/roles/{id}/permissions/:
    get:
      operationId: v1_auth_roles_permissions_retrieve
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: A unique integer value identifying this Role.
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
          description: ''
  /api/v1/auth/user-roles/:
    get:
      operationId: v1_auth_user_roles_list
      parameters:
        - name: ordering
          required: false
          in: query
          description: Which field to use when ordering the results.
          schema:
            type: string
        - name: page
          required: false
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
        - name: search
          required: false
          in: query
          description: A search term.
          schema:
            type: string
      tags:
        - v1
      security:
        - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserRoleList'
          description: ''
    post:
      operationId: v1_auth_user_roles_create
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRoleRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRoleRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRoleRequest'
        required: true
      security:
        - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRole'
          description: ''
  /api/v1/auth/user-roles/{id}/:
    get:
      operationId: v1_auth_user_roles_retrieve
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: A unique integer value identifying this User Role.
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRole'
          description: ''
    put:
      operationId: v1_auth_user_roles_update
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: A unique integer value identifying this User Role.
          required: true
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRoleRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRoleRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRoleRequest'
        required: true
      security:
        - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRole'
          description: ''
    delete:
      operationId: v1_auth_user_roles_destroy
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: A unique integer value identifying this User Role.
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
      responses:
        '204':
          description: No response body
    patch:
      operationId: v1_auth_user_roles_partial_update
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: A unique integer value identifying this User Role.
          required: true
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserRoleRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserRoleRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserRoleRequest'
      security:
        - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRole'
          description: ''
  /api/v1/auth/users/:
    get:
      operationId: v1_auth_users_list
      parameters:
        - name: ordering
          required: false
          in: query
          description: Which field to use when ordering the results.
          schema:
            type: string
        - name: page
          required: false
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
        - name: search
          required: false
          in: query
          description: A search term.
          schema:
            type: string
      tags:
        - v1
      security:
        - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
  /api/v1/auth/users/{id}/:
    get:
      operationId: v1_auth_users_retrieve
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: A unique integer value identifying this user.
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/v1/rbac/stats/:
    get:
      operationId: v1_rbac_stats_retrieve
      tags:
        - v1
      security:
        - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/projects/:
    get:
      operationId: v1_projects_list
      description: List all projects or create a new project.
      parameters:
        - name: ordering
          required: false
          in: query
          description: Which field to use when ordering the results.
          schema:
            type: string
        - name: page
          required: false
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
        - name: search
          required: false
          in: query
          description: A search term.
          schema:
            type: string
      tags:
        - v1
      security:
        - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProjectList'
          description: ''
    post:
      operationId: v1_projects_create
      description: List all projects or create a new project.
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectCreateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProjectCreateRequest'
        required: true
      security:
        - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectCreate'
          description: ''
  /api/v1/projects/{id}/:
    get:
      operationId: v1_projects_retrieve
      description: Retrieve, update or delete a project.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
    put:
      operationId: v1_projects_update
      description: Retrieve, update or delete a project.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
        required: true
      security:
        - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
    patch:
      operationId: v1_projects_partial_update
      description: Retrieve, update or delete a project.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProjectRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProjectRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProjectRequest'
      security:
        - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
    delete:
      operationId: v1_projects_destroy
      description: Retrieve, update or delete a project.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/projects/{project_id}/tasks/:
    get:
      operationId: v1_projects_tasks_list
      description: List all tasks or create a new task.
      parameters:
        - name: ordering
          required: false
          in: query
          description: Which field to use when ordering the results.
          schema:
            type: string
        - name: page
          required: false
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
        - in: path
          name: project_id
          schema:
            type: integer
          required: true
        - name: search
          required: false
          in: query
          description: A search term.
          schema:
            type: string
      tags:
        - v1
      security:
        - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTaskList'
          description: ''
    post:
      operationId: v1_projects_tasks_create
      description: List all tasks or create a new task.
      parameters:
        - in: path
          name: project_id
          schema:
            type: integer
          required: true
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TaskCreateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TaskCreateRequest'
        required: true
      security:
        - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskCreate'
          description: ''
  /api/v1/projects/{project_id}/tasks/{id}/:
    get:
      operationId: v1_projects_tasks_retrieve
      description: Retrieve, update or delete a task.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
        - in: path
          name: project_id
          schema:
            type: integer
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: ''
    put:
      operationId: v1_projects_tasks_update
      description: Retrieve, update or delete a task.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
        - in: path
          name: project_id
          schema:
            type: integer
          required: true
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TaskRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TaskRequest'
        required: true
      security:
        - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: ''
    patch:
      operationId: v1_projects_tasks_partial_update
      description: Retrieve, update or delete a task.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
        - in: path
          name: project_id
          schema:
            type: integer
          required: true
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTaskRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTaskRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTaskRequest'
      security:
        - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: ''
    delete:
      operationId: v1_projects_tasks_destroy
      description: Retrieve, update or delete a task.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
        - in: path
          name: project_id
          schema:
            type: integer
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/projects/{project_id}/tasks/{task_id}/timelogs/:
    get:
      operationId: v1_projects_tasks_timelogs_list
      description: List all time logs or create a new time log.
      parameters:
        - name: ordering
          required: false
          in: query
          description: Which field to use when ordering the results.
          schema:
            type: string
        - name: page
          required: false
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
        - in: path
          name: project_id
          schema:
            type: integer
          required: true
        - name: search
          required: false
          in: query
          description: A search term.
          schema:
            type: string
        - in: path
          name: task_id
          schema:
            type: integer
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTimeLogList'
          description: ''
    post:
      operationId: v1_projects_tasks_timelogs_create
      description: List all time logs or create a new time log.
      parameters:
        - in: path
          name: project_id
          schema:
            type: integer
          required: true
        - in: path
          name: task_id
          schema:
            type: integer
          required: true
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimeLogCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TimeLogCreateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TimeLogCreateRequest'
        required: true
      security:
        - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeLogCreate'
          description: ''
  /api/v1/projects/{project_id}/tasks/{task_id}/timelogs/{id}/:
    get:
      operationId: v1_projects_tasks_timelogs_retrieve
      description: Retrieve, update or delete a time log.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
        - in: path
          name: project_id
          schema:
            type: integer
          required: true
        - in: path
          name: task_id
          schema:
            type: integer
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeLog'
          description: ''
    put:
      operationId: v1_projects_tasks_timelogs_update
      description: Retrieve, update or delete a time log.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
        - in: path
          name: project_id
          schema:
            type: integer
          required: true
        - in: path
          name: task_id
          schema:
            type: integer
          required: true
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimeLogRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TimeLogRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TimeLogRequest'
        required: true
      security:
        - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeLog'
          description: ''
    patch:
      operationId: v1_projects_tasks_timelogs_partial_update
      description: Retrieve, update or delete a time log.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
        - in: path
          name: project_id
          schema:
            type: integer
          required: true
        - in: path
          name: task_id
          schema:
            type: integer
          required: true
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTimeLogRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTimeLogRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTimeLogRequest'
      security:
        - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeLog'
          description: ''
    delete:
      operationId: v1_projects_tasks_timelogs_destroy
      description: Retrieve, update or delete a time log.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
        - in: path
          name: project_id
          schema:
            type: integer
          required: true
        - in: path
          name: task_id
          schema:
            type: integer
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/workspace/dashboard/:
    get:
      operationId: v1_workspace_dashboard_retrieve
      description: Personal dashboard for workspace.
      tags:
        - v1
      security:
        - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/workspace/timelogs/:
    get:
      operationId: v1_workspace_timelogs_retrieve
      description: List user's time logs.
      tags:
        - v1
      security:
        - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/workspace/timelogs/{id}/:
    get:
      operationId: v1_workspace_timelogs_retrieve_2
      description: Retrieve time log details.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/workspace/my-tasks/:
    get:
      operationId: v1_workspace_my_tasks_retrieve
      description: List user's assigned tasks.
      tags:
        - v1
      security:
        - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/workspace/calendar/:
    get:
      operationId: v1_workspace_calendar_retrieve
      description: Calendar view for workspace.
      tags:
        - v1
      security:
        - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/reports/:
    get:
      operationId: v1_reports_retrieve
      description: List available reports.
      tags:
        - v1
      security:
        - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/reports/employee-productivity/:
    get:
      operationId: v1_reports_employee_productivity_retrieve
      description: Employee productivity report.
      tags:
        - v1
      security:
        - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/reports/project-progress/:
    get:
      operationId: v1_reports_project_progress_retrieve
      description: Project progress report.
      tags:
        - v1
      security:
        - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/reports/time-tracking/:
    get:
      operationId: v1_reports_time_tracking_retrieve
      description: Time tracking report.
      tags:
        - v1
      security:
        - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/reports/custom/:
    get:
      operationId: v1_reports_custom_retrieve
      description: Custom report builder.
      tags:
        - v1
      security:
        - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/audit/logs/:
    get:
      operationId: v1_audit_logs_retrieve
      description: List audit logs for the organization.
      tags:
        - v1
      security:
        - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/audit/logs/{id}/:
    get:
      operationId: v1_audit_logs_retrieve_2
      description: Retrieve audit log details.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/audit/activity/:
    get:
      operationId: v1_audit_activity_retrieve
      description: Activity feed for the organization.
      tags:
        - v1
      security:
        - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/analytics/cards/:
    get:
      operationId: v1_analytics_cards_list
      description: View for listing and creating dashboard cards.
      parameters:
        - name: ordering
          required: false
          in: query
          description: Which field to use when ordering the results.
          schema:
            type: string
        - name: page
          required: false
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
        - name: search
          required: false
          in: query
          description: A search term.
          schema:
            type: string
      tags:
        - v1
      security:
        - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedDashboardCardList'
          description: ''
    post:
      operationId: v1_analytics_cards_create
      description: View for listing and creating dashboard cards.
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DashboardCardRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DashboardCardRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/DashboardCardRequest'
        required: true
      security:
        - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardCard'
          description: ''
  /api/v1/analytics/cards/{id}/:
    get:
      operationId: v1_analytics_cards_retrieve
      description: View for retrieving, updating, and deleting dashboard cards.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardCard'
          description: ''
    put:
      operationId: v1_analytics_cards_update
      description: View for retrieving, updating, and deleting dashboard cards.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DashboardCardRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DashboardCardRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/DashboardCardRequest'
        required: true
      security:
        - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardCard'
          description: ''
    patch:
      operationId: v1_analytics_cards_partial_update
      description: View for retrieving, updating, and deleting dashboard cards.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      tags:
        - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedDashboardCardRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedDashboardCardRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedDashboardCardRequest'
      security:
        - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardCard'
          description: ''
    delete:
      operationId: v1_analytics_cards_destroy
      description: View for retrieving, updating, and deleting dashboard cards.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      tags:
        - v1
      security:
        - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/analytics/dashboard/:
    get:
      operationId: v1_analytics_dashboard_retrieve
      description: Get comprehensive dashboard data for all modules.
      tags:
        - v1
      security:
        - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/analytics/charts/:
    get:
      operationId: v1_analytics_charts_retrieve
      description: Get chart data for analytics.
      tags:
        - v1
      security:
        - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/analytics/metrics/:
    get:
      operationId: v1_analytics_metrics_retrieve
      description: Get metric cards for analytics.
      tags:
        - v1
      security:
        - jwtAuth: []
      responses:
        '200':
          description: No response body
components:
  schemas:
    CardTypeEnum:
      enum:
        - summary
        - chart
        - list
        - metric
        - progress
      type: string
      description: |-
        * `summary` - Summary
        * `chart` - Chart
        * `list` - List
        * `metric` - Metric
        * `progress` - Progress
    ChangePassword:
      type: object
      description: Serializer for changing user password.
      properties:
        old_password:
          type: string
        new_password:
          type: string
          minLength: 8
        new_password_confirm:
          type: string
      required:
        - new_password
        - new_password_confirm
        - old_password
    ChangePasswordRequest:
      type: object
      description: Serializer for changing user password.
      properties:
        old_password:
          type: string
          minLength: 1
        new_password:
          type: string
          minLength: 8
        new_password_confirm:
          type: string
          minLength: 1
      required:
        - new_password
        - new_password_confirm
        - old_password
    CustomTokenObtainPairRequest:
      type: object
      description: Custom JWT token serializer with additional user information.
      properties:
        username:
          type: string
          writeOnly: true
          minLength: 1
        password:
          type: string
          writeOnly: true
          minLength: 1
      required:
        - password
        - username
    DashboardCard:
      type: object
      description: Serializer for dashboard cards.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        title:
          type: string
          maxLength: 200
        description:
          type: string
          nullable: true
        module:
          type: integer
          description: Module this card belongs to
        card_type:
          $ref: '#/components/schemas/CardTypeEnum'
        icon:
          type: string
          nullable: true
          maxLength: 50
        color:
          type: string
          maxLength: 7
        order:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        required_permissions: {}
        visible_to_roles: {}
        data_source:
          type: string
          maxLength: 100
        refresh_interval:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        is_active:
          type: boolean
        show_in_dashboard:
          type: boolean
        show_in_sidebar:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
        - created_at
        - data_source
        - id
        - module
        - name
        - title
        - updated_at
    DashboardCardRequest:
      type: object
      description: Serializer for dashboard cards.
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        title:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          nullable: true
        module:
          type: integer
          description: Module this card belongs to
        card_type:
          $ref: '#/components/schemas/CardTypeEnum'
        icon:
          type: string
          nullable: true
          maxLength: 50
        color:
          type: string
          minLength: 1
          maxLength: 7
        order:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        required_permissions: {}
        visible_to_roles: {}
        data_source:
          type: string
          minLength: 1
          maxLength: 100
        refresh_interval:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        is_active:
          type: boolean
        show_in_dashboard:
          type: boolean
        show_in_sidebar:
          type: boolean
      required:
        - data_source
        - module
        - name
        - title
    MyPermissions:
      type: object
      properties:
        permissions:
          type: array
          items:
            type: string
      required:
        - permissions
    PaginatedDashboardCardList:
      type: object
      required:
        - count
        - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/DashboardCard'
    PaginatedPermissionList:
      type: object
      required:
        - count
        - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Permission'
    PaginatedProjectList:
      type: object
      required:
        - count
        - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Project'
    PaginatedRoleList:
      type: object
      required:
        - count
        - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Role'
    PaginatedTaskList:
      type: object
      required:
        - count
        - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Task'
    PaginatedTimeLogList:
      type: object
      required:
        - count
        - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/TimeLog'
    PaginatedUserList:
      type: object
      required:
        - count
        - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/User'
    PaginatedUserRoleList:
      type: object
      required:
        - count
        - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/UserRole'
    PatchedDashboardCardRequest:
      type: object
      description: Serializer for dashboard cards.
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        title:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          nullable: true
        module:
          type: integer
          description: Module this card belongs to
        card_type:
          $ref: '#/components/schemas/CardTypeEnum'
        icon:
          type: string
          nullable: true
          maxLength: 50
        color:
          type: string
          minLength: 1
          maxLength: 7
        order:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        required_permissions: {}
        visible_to_roles: {}
        data_source:
          type: string
          minLength: 1
          maxLength: 100
        refresh_interval:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        is_active:
          type: boolean
        show_in_dashboard:
          type: boolean
        show_in_sidebar:
          type: boolean
    PatchedPermissionRequest:
      type: object
      properties:
        codename:
          type: string
          minLength: 1
          maxLength: 100
        name:
          type: string
          minLength: 1
          maxLength: 150
        description:
          type: string
          nullable: true
        is_active:
          type: boolean
    PatchedProjectRequest:
      type: object
      description: Serializer for Project model.
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/Status851Enum'
        priority:
          $ref: '#/components/schemas/PriorityEnum'
        start_date:
          type: string
          format: date
          nullable: true
        end_date:
          type: string
          format: date
          nullable: true
        budget:
          type: string
          format: decimal
          pattern: ^-?\d{0,10}(?:\.\d{0,2})?$
          nullable: true
        tags: {}
        settings: {}
        is_active:
          type: boolean
    PatchedRoleRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          nullable: true
        is_active:
          type: boolean
        permissions:
          type: array
          items:
            type: integer
    PatchedTaskRequest:
      type: object
      description: Serializer for Task model.
      properties:
        project:
          type: integer
        title:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/StatusB03Enum'
        priority:
          $ref: '#/components/schemas/PriorityEnum'
        start_date:
          type: string
          format: date-time
          nullable: true
        due_date:
          type: string
          format: date-time
          nullable: true
        estimated_hours:
          type: string
          format: decimal
          pattern: ^-?\d{0,4}(?:\.\d{0,2})?$
          nullable: true
        tags: {}
        attachments: {}
        comments: {}
        depends_on:
          type: array
          items:
            type: integer
        is_active:
          type: boolean
    PatchedTimeLogRequest:
      type: object
      description: Serializer for TimeLog model.
      properties:
        task:
          type: integer
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
          nullable: true
        description:
          type: string
          nullable: true
        is_billable:
          type: boolean
        is_approved:
          type: boolean
        approved_by:
          type: integer
          nullable: true
        is_active:
          type: boolean
    PatchedUserRequest:
      type: object
      description: |-
        Serializer for User model with profile information.
        Ensures a profile exists (creates if missing) to avoid DoesNotExist errors.
      properties:
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        is_active:
          type: boolean
          title: Active
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
    PatchedUserRoleRequest:
      type: object
      properties:
        user:
          type: integer
        role:
          type: integer
    PatchedUserUpdateRequest:
      type: object
      description: Serializer for updating user information.
      properties:
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        is_active:
          type: boolean
          title: Active
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
        profile:
          $ref: '#/components/schemas/UserProfileRequest'
    Permission:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        codename:
          type: string
          maxLength: 100
        name:
          type: string
          maxLength: 150
        description:
          type: string
          nullable: true
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
        - codename
        - created_at
        - id
        - name
        - updated_at
    PermissionRequest:
      type: object
      properties:
        codename:
          type: string
          minLength: 1
          maxLength: 100
        name:
          type: string
          minLength: 1
          maxLength: 150
        description:
          type: string
          nullable: true
        is_active:
          type: boolean
      required:
        - codename
        - name
    PriorityEnum:
      enum:
        - low
        - medium
        - high
        - urgent
      type: string
      description: |-
        * `low` - Low
        * `medium` - Medium
        * `high` - High
        * `urgent` - Urgent
    Project:
      type: object
      description: Serializer for Project model.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/Status851Enum'
        priority:
          $ref: '#/components/schemas/PriorityEnum'
        start_date:
          type: string
          format: date
          nullable: true
        end_date:
          type: string
          format: date
          nullable: true
        project_manager:
          allOf:
            - $ref: '#/components/schemas/User'
          readOnly: true
        team_members:
          type: array
          items:
            $ref: '#/components/schemas/User'
          readOnly: true
        budget:
          type: string
          format: decimal
          pattern: ^-?\d{0,10}(?:\.\d{0,2})?$
          nullable: true
        progress:
          type: integer
          readOnly: true
        tags: {}
        settings: {}
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        is_active:
          type: boolean
      required:
        - created_at
        - id
        - name
        - progress
        - project_manager
        - team_members
        - updated_at
    ProjectCreate:
      type: object
      description: Serializer for creating a new project.
      properties:
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/Status851Enum'
        priority:
          $ref: '#/components/schemas/PriorityEnum'
        start_date:
          type: string
          format: date
          nullable: true
        end_date:
          type: string
          format: date
          nullable: true
        project_manager:
          type: integer
          nullable: true
        team_members:
          type: array
          items:
            type: integer
        budget:
          type: string
          format: decimal
          pattern: ^-?\d{0,10}(?:\.\d{0,2})?$
          nullable: true
        tags: {}
        settings: {}
      required:
        - name
    ProjectCreateRequest:
      type: object
      description: Serializer for creating a new project.
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/Status851Enum'
        priority:
          $ref: '#/components/schemas/PriorityEnum'
        start_date:
          type: string
          format: date
          nullable: true
        end_date:
          type: string
          format: date
          nullable: true
        project_manager:
          type: integer
          nullable: true
        team_members:
          type: array
          items:
            type: integer
        budget:
          type: string
          format: decimal
          pattern: ^-?\d{0,10}(?:\.\d{0,2})?$
          nullable: true
        tags: {}
        settings: {}
      required:
        - name
    ProjectRequest:
      type: object
      description: Serializer for Project model.
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/Status851Enum'
        priority:
          $ref: '#/components/schemas/PriorityEnum'
        start_date:
          type: string
          format: date
          nullable: true
        end_date:
          type: string
          format: date
          nullable: true
        budget:
          type: string
          format: decimal
          pattern: ^-?\d{0,10}(?:\.\d{0,2})?$
          nullable: true
        tags: {}
        settings: {}
        is_active:
          type: boolean
      required:
        - name
    Role:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        description:
          type: string
          nullable: true
        is_active:
          type: boolean
        permissions:
          type: array
          items:
            type: integer
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
        - created_at
        - id
        - name
        - updated_at
    RoleRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          nullable: true
        is_active:
          type: boolean
        permissions:
          type: array
          items:
            type: integer
      required:
        - name
    Status851Enum:
      enum:
        - planning
        - active
        - on_hold
        - completed
        - cancelled
      type: string
      description: |-
        * `planning` - Planning
        * `active` - Active
        * `on_hold` - On Hold
        * `completed` - Completed
        * `cancelled` - Cancelled
    StatusB03Enum:
      enum:
        - pending
        - in_progress
        - review
        - completed
        - cancelled
      type: string
      description: |-
        * `pending` - Pending
        * `in_progress` - In Progress
        * `review` - Review
        * `completed` - Completed
        * `cancelled` - Cancelled
    Task:
      type: object
      description: Serializer for Task model.
      properties:
        id:
          type: integer
          readOnly: true
        project:
          type: integer
        title:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/StatusB03Enum'
        priority:
          $ref: '#/components/schemas/PriorityEnum'
        assigned_to:
          allOf:
            - $ref: '#/components/schemas/User'
          readOnly: true
        created_by:
          allOf:
            - $ref: '#/components/schemas/User'
          readOnly: true
        updated_by:
          allOf:
            - $ref: '#/components/schemas/User'
          readOnly: true
        start_date:
          type: string
          format: date-time
          nullable: true
        due_date:
          type: string
          format: date-time
          nullable: true
        estimated_hours:
          type: string
          format: decimal
          pattern: ^-?\d{0,4}(?:\.\d{0,2})?$
          nullable: true
        actual_hours:
          type: string
          format: decimal
          pattern: ^-?\d{0,4}(?:\.\d{0,2})?$
          readOnly: true
        progress:
          type: integer
          readOnly: true
        tags: {}
        attachments: {}
        comments: {}
        depends_on:
          type: array
          items:
            type: integer
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        is_active:
          type: boolean
      required:
        - actual_hours
        - assigned_to
        - created_at
        - created_by
        - id
        - progress
        - project
        - title
        - updated_at
        - updated_by
    TaskCreate:
      type: object
      description: Serializer for creating a new task.
      properties:
        project:
          type: integer
        title:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/StatusB03Enum'
        priority:
          $ref: '#/components/schemas/PriorityEnum'
        assigned_to:
          type: integer
          nullable: true
        start_date:
          type: string
          format: date-time
          nullable: true
        due_date:
          type: string
          format: date-time
          nullable: true
        estimated_hours:
          type: string
          format: decimal
          pattern: ^-?\d{0,4}(?:\.\d{0,2})?$
          nullable: true
        tags: {}
        attachments: {}
        comments: {}
        depends_on:
          type: array
          items:
            type: integer
      required:
        - project
        - title
    TaskCreateRequest:
      type: object
      description: Serializer for creating a new task.
      properties:
        project:
          type: integer
        title:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/StatusB03Enum'
        priority:
          $ref: '#/components/schemas/PriorityEnum'
        assigned_to:
          type: integer
          nullable: true
        start_date:
          type: string
          format: date-time
          nullable: true
        due_date:
          type: string
          format: date-time
          nullable: true
        estimated_hours:
          type: string
          format: decimal
          pattern: ^-?\d{0,4}(?:\.\d{0,2})?$
          nullable: true
        tags: {}
        attachments: {}
        comments: {}
        depends_on:
          type: array
          items:
            type: integer
      required:
        - project
        - title
    TaskRequest:
      type: object
      description: Serializer for Task model.
      properties:
        project:
          type: integer
        title:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/StatusB03Enum'
        priority:
          $ref: '#/components/schemas/PriorityEnum'
        start_date:
          type: string
          format: date-time
          nullable: true
        due_date:
          type: string
          format: date-time
          nullable: true
        estimated_hours:
          type: string
          format: decimal
          pattern: ^-?\d{0,4}(?:\.\d{0,2})?$
          nullable: true
        tags: {}
        attachments: {}
        comments: {}
        depends_on:
          type: array
          items:
            type: integer
        is_active:
          type: boolean
      required:
        - project
        - title
    ThemeEnum:
      enum:
        - light
        - dark
        - auto
      type: string
      description: |-
        * `light` - Light
        * `dark` - Dark
        * `auto` - Auto
    TimeLog:
      type: object
      description: Serializer for TimeLog model.
      properties:
        id:
          type: integer
          readOnly: true
        user:
          allOf:
            - $ref: '#/components/schemas/User'
          readOnly: true
        task:
          type: integer
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
          nullable: true
        duration:
          type: string
          readOnly: true
          nullable: true
        description:
          type: string
          nullable: true
        is_billable:
          type: boolean
        is_approved:
          type: boolean
        approved_by:
          type: integer
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        is_active:
          type: boolean
      required:
        - created_at
        - duration
        - id
        - start_time
        - task
        - updated_at
        - user
    TimeLogCreate:
      type: object
      description: Serializer for creating a new time log.
      properties:
        task:
          type: integer
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
          nullable: true
        description:
          type: string
          nullable: true
        is_billable:
          type: boolean
      required:
        - start_time
        - task
    TimeLogCreateRequest:
      type: object
      description: Serializer for creating a new time log.
      properties:
        task:
          type: integer
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
          nullable: true
        description:
          type: string
          nullable: true
        is_billable:
          type: boolean
      required:
        - start_time
        - task
    TimeLogRequest:
      type: object
      description: Serializer for TimeLog model.
      properties:
        task:
          type: integer
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
          nullable: true
        description:
          type: string
          nullable: true
        is_billable:
          type: boolean
        is_approved:
          type: boolean
        approved_by:
          type: integer
          nullable: true
        is_active:
          type: boolean
      required:
        - start_time
        - task
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
      required:
        - access
        - refresh
    TokenRefreshRequest:
      type: object
      properties:
        refresh:
          type: string
          minLength: 1
      required:
        - refresh
    User:
      type: object
      description: |-
        Serializer for User model with profile information.
        Ensures a profile exists (creates if missing) to avoid DoesNotExist errors.
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        is_active:
          type: boolean
          title: Active
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
        date_joined:
          type: string
          format: date-time
          readOnly: true
        last_login:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        profile:
          type: string
          readOnly: true
      required:
        - date_joined
        - id
        - last_login
        - profile
        - username
    UserProfile:
      type: object
      description: Serializer for UserProfile model.
      properties:
        phone:
          type: string
          nullable: true
          maxLength: 20
        avatar:
          type: string
          format: uri
          nullable: true
        bio:
          type: string
          nullable: true
        timezone:
          type: string
          maxLength: 50
        language:
          type: string
          maxLength: 10
        job_title:
          type: string
          nullable: true
          maxLength: 100
        department:
          type: string
          nullable: true
          maxLength: 100
        employee_id:
          type: string
          nullable: true
          maxLength: 50
        email_notifications:
          type: boolean
        sms_notifications:
          type: boolean
        theme:
          $ref: '#/components/schemas/ThemeEnum'
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
        - created_at
        - updated_at
    UserProfileRequest:
      type: object
      description: Serializer for UserProfile model.
      properties:
        phone:
          type: string
          nullable: true
          maxLength: 20
        avatar:
          type: string
          format: binary
          nullable: true
        bio:
          type: string
          nullable: true
        timezone:
          type: string
          minLength: 1
          maxLength: 50
        language:
          type: string
          minLength: 1
          maxLength: 10
        job_title:
          type: string
          nullable: true
          maxLength: 100
        department:
          type: string
          nullable: true
          maxLength: 100
        employee_id:
          type: string
          nullable: true
          maxLength: 50
        email_notifications:
          type: boolean
        sms_notifications:
          type: boolean
        theme:
          $ref: '#/components/schemas/ThemeEnum'
    UserRegistration:
      type: object
      description: Serializer for user registration.
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
        - username
    UserRegistrationRequest:
      type: object
      description: Serializer for user registration.
      properties:
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        password:
          type: string
          writeOnly: true
          minLength: 8
        password_confirm:
          type: string
          writeOnly: true
          minLength: 1
      required:
        - password
        - password_confirm
        - username
    UserRequest:
      type: object
      description: |-
        Serializer for User model with profile information.
        Ensures a profile exists (creates if missing) to avoid DoesNotExist errors.
      properties:
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        is_active:
          type: boolean
          title: Active
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
      required:
        - username
    UserRole:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
        role:
          type: integer
      required:
        - id
        - role
        - user
    UserRoleRequest:
      type: object
      properties:
        user:
          type: integer
        role:
          type: integer
      required:
        - role
        - user
    UserUpdate:
      type: object
      description: Serializer for updating user information.
      properties:
        username:
          type: string
          readOnly: true
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        is_active:
          type: boolean
          title: Active
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
        profile:
          $ref: '#/components/schemas/UserProfile'
      required:
        - username
    UserUpdateRequest:
      type: object
      description: Serializer for updating user information.
      properties:
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        is_active:
          type: boolean
          title: Active
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
        profile:
          $ref: '#/components/schemas/UserProfileRequest'
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
